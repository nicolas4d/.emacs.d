* Emacs Lisp
  This is the ‘GNU Emacs Lisp Reference Manual’ corresponding to Emacs
  version 26.3.50.

  Copyright © 1990–1996, 1998–2019 Free Software Foundation, Inc.

  Permission is granted to copy, distribute and/or modify this
  document under the terms of the GNU Free Documentation License,
  Version 1.3 or any later version published by the Free Software
  Foundation; with the Invariant Sections being “GNU General Public
  License,” with the Front-Cover Texts being “A GNU Manual,” and with
  the Back-Cover Texts as in (a) below.  A copy of the license is
  included in the section entitled “GNU Free Documentation License.”

  (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
  modify this GNU manual.  Buying copies from the FSF supports it in
  developing GNU and promoting software freedom.”

* Menu
** [[file:note/Introduction.org][Introduction]]
   Introduction and conventions used.
** [[file:note/Lisp Data Types.org][Lisp Data Types]]
   Data types of objects in Emacs Lisp.
** [[file:note/Numbers.org][Numbers]]
   Numbers and arithmetic functions.
** [[file:note/Strings and Characters.org][Strings and Characters]]
*** [[file:note/Basics.org][Basics]]
*** Predicates for Strings::    Testing whether an object is a string or char.
*** Creating Strings::          Functions to allocate new strings.
*** Modifying Strings::         Altering the contents of an existing string.
*** [[file:note/Text Comparison.org][Text Comparison]] :: Comparing characters or strings.
*** String Conversion::         Converting to and from characters and strings.
*** Formatting Strings::        ‘format’: Emacs’s analogue of ‘printf’.
*** Case Conversion::           Case conversion functions.
*** Case Tables::               Customizing case conversion.
** [[file:note/Lists.org][Lists]] :: Lists, cons cells, and related functions.
*** Cons Cells::How lists are made out of cons cells.
    #+begin_src emacs-lisp :tangle yes
      (setq n-test (list "sdf" 'sdfsdf))
      (consp  n-test)
      (consp (list "sdf" 'sdfsdf))
      (atom n-test)
      (atom nil)
      (listp )
    #+end_src
*** List-related Predicates::        Is this object a list?  Comparing two lists.
*** List Elements::       Extracting the pieces of a list.
*** Building Lists::      Creating list structure.
*** List Variables::      Modifying lists stored in variables.
*** Modifying Lists::     Storing new pieces into an existing list.
*** Sets And Lists::      A list can represent a finite mathematical set.
*** Association Lists::   A list can represent a finite relation or mapping.
    #+begin_src emacs-lisp :tangle yes
      (setq trees '((pine . cones) (oak . acorns) (maple . seeds)))
      ⇒ ((pine . cones) (oak . acorns) (maple . seeds))
      (assq 'pine trees)
      ⇒ (pine . cones)
      (cdr (assq 'pine trees))
    #+end_src
*** Property Lists::      A list of paired elements.
** [[file:note/Sequences Arrays Vectors.org][Sequences Arrays Vectors]]
   Lists, strings and vectors are called sequences.
   Certain functions act on any kind of sequence.
   The description of vectors is here as well.
** [[file:note/Records.org][Records]]
   Compound objects with programmer-defined types.
** [[file:note/Hash Tables.org][Hash Tables]]
   Very fast lookup-tables.
** [[file:note/Symbols.org][Symbols]]
   Symbols represent names, uniquely.
** [[file:note/Evaluation.org][Evaluation]]
   How Lisp expressions are evaluated.
** [[file:note/Control Structures.org][Control Structures]]
   Conditionals, loops, nonlocal exits.
** [[file:note/Variables.org][Variables]]
   Using symbols in programs to stand for values.
** [[file:note/Functions.org][Functions]]
   A function is a Lisp program that can be invoked from other functions.
*** What Is a Function::          Lisp functions vs. primitives; terminology.
*** Lambda Expressions::          How functions are expressed as Lisp objects.
*** Function Names::              A symbol can serve as the name of a function.
*** Defining Functions::          Lisp expressions for defining functions.
*** Calling Functions::           How to use an existing function.
*** Mapping Functions::           Applying a function to each element of a list, etc.
*** Anonymous Functions::         Lambda expressions are functions with no names.
*** Generic Functions::           Polymorphism, Emacs-style.
*** Function Cells::              Accessing or setting the function definition
    of a symbol.
*** Closures::                    Functions that enclose a lexical environment.
*** Advising Functions::          Adding to the definition of a function.
    #+begin_src emacs-lisp :tangle yes      (defun my-trace ()
      (defun my-tracing-function (proc string)
        (message "Proc %S received %S" proc string))

      (add-function :before (process-filter PROC) #'my-tracing-function)
    #+end_src
**** Core Advising Primitives::    Primitives to manipulate advice.
     #+begin_src emacs-lisp :tangle yes
       (defun my-add-function ()
         (message "my-add-fuction"))

       (my-add-function)

       (defun my-be-add-function ()
         (message "my-be-add-function"))

       (my-be-add-function)

       (setq my-be-var 'my-be-add-function)
       (add-function :before my-be-var #'my-add-function)
       (funcall my-be-var)
       (remove-function my-be-var #'my-add-function)


       (advice-add 'my-be-add-function :before 'my-add-function)
       (advice-remove 'my-be-add-function 'my-add-function)
       (my-be-add-function)
     #+end_src
**** Advising Named Functions::    Advising named functions.
**** Advice combinators::          Ways to compose advice.
**** Porting old advice::          Adapting code using the old defadvice.
*** Obsolete Functions::          Declaring functions obsolete.
*** Inline Functions::            Functions that the compiler will expand inline.
*** Declare Form::                Adding additional information about a function.
*** Declaring Functions::         Telling the compiler that a function is defined.
*** Function Safety::             Determining whether a function is safe to call.
*** Related Topics::              Cross-references to specific Lisp primitives
    that have a special bearing on how functions work.


** [[file:note/Macros.org][Macros]]
   Macros are a way to extend the Lisp language.
** [[file:note/Customization.org][Customization]]
   Making variables and faces customizable.
** [[file:note/Loading.org][Loading]]
   Reading files of Lisp code into Lisp.
** [[file:note/Byte Compilation.org][Byte Compilation]]
   Compilation makes programs run faster.
** [[file:note/Debugging.org][Debugging]]
   Tools and tips for debugging Lisp programs.
** [[file:note/Read and Print.org][Read and Print]]
   Converting Lisp objects to text and back.
** [[file:note/Minibuffers.org][Minibuffers]]
   Using the minibuffer to read input.
** [[file:note/Command Loop.org][Command Loop]]
   How the editor command loop works,
   and how you can call its subroutines.
** [[file:note/Keymaps.org][Keymaps]]
   Defining the bindings from keys to commands.
** [[file:note/Modes.org][Modes]]
   Defining major and minor modes.
** [[file:note/Documentation.org][Documentation]]
   Writing and using documentation strings.
** [[file:note/Files.org][Files]]
   Accessing files.
** [[file:note/Backups and Auto-Saving.org][Backups and Auto-Saving]]
   Controlling how backups and auto-save
   files are made.
** [[file:note/Buffers.org][Buffers]]
   Creating and using buffer objects.
** [[file:note/Windows.org][Windows]]
   Manipulating windows and displaying buffers.
** [[file:note/Frames.org][Frames]]
   Making multiple system-level windows.
** [[file:note/Positions.org][Positions]]
   Buffer positions and motion functions.
** [[file:note/Markers.org][Markers]]
   Markers represent positions and update
   automatically when the text is changed.
** [[file:note/Text.org][Text]]
*** Near Point::       Examining text in the vicinity of point.
*** Buffer Contents::  Examining text in a general fashion.
*** Comparing Text::   Comparing substrings of buffers.
*** Insertion::        Adding new text to a buffer.
*** Commands for Insertion::  User-level commands to insert text.
*** Deletion::         Removing text from a buffer.
*** User-Level Deletion::     User-level commands to delete text.
*** The Kill Ring
**** Kill Ring Concepts::     What text looks like in the kill ring.
**** Kill Functions::         Functions that kill text.
**** Yanking::How yanking is done.
     #+begin_src emacs-lisp :tangle yes
       (insert-for-yank "d")
     #+end_src
**** Yank Commands::          Commands that access the kill ring.
**** Low-Level Kill Ring::    Functions and variables for kill ring access.
**** Internals of Kill Ring:: Variables that hold kill ring data.
*** Undo::             Undoing changes to the text of a buffer.
*** Maintaining Undo:: How to enable and disable undo information.
    How to control how much information is kept.
*** Filling::          Functions for explicit filling.
*** Margins::          How to specify margins for filling commands.
*** Adaptive Fill::    Adaptive Fill mode chooses a fill prefix from context.
*** Auto Filling::     How auto-fill mode is implemented to break lines.
*** Sorting::          Functions for sorting parts of the buffer.
*** Columns::          Computing horizontal positions, and using them.
*** Indentation::      Functions to insert or adjust indentation.
*** Case Changes::     Case conversion of parts of the buffer.
*** Text Properties::  Assigning Lisp property lists to text characters.
*** Substitution::     Replacing a given character wherever it appears.
*** Registers::        How registers are implemented.  Accessing the text or
    **position stored in a register.
*** Transposition::    Swapping two portions of a buffer.
*** Replacing::        Replacing the text of one buffer with the text
    **of another buffer.
*** Decompression::    Dealing with compressed data.
*** Base 64::          Conversion to or from base 64 encoding.
*** Checksum/Hash::    Computing cryptographic hashes.
*** GnuTLS Cryptography:: Cryptographic algorithms imported from GnuTLS.
*** Parsing HTML/XML:: Parsing HTML and XML.
*** Atomic Changes::   Installing several buffer changes atomically.
*** Change Hooks::     Supplying functions to be run when text is changed.
** [[file:note/Non-ASCII Characters.org][Non-ASCII Characters]]
   Non-ASCII text in buffers and strings.
** [[file:note/Searching and Matching.org][Searching and Matching]]
*** String Search::         Search for an exact match.
*** Searching and Case::    Case-independent or case-significant searching.
*** Regular Expressions::   Describing classes of strings.
**** Syntax of Regexps::       Rules for writing regular expressions.
***** Regexp Special::Special characters in regular expressions.
***** Char Classes::        Character classes used in regular expressions.
***** Regexp Backslash::    Backslash-sequences in regular expressions.
      #+begin_src emacs-lisp :tangle yes
        (re-search-forward "\\(foo\\|bar\\)x" nil t)
        foox barx
      #+end_src
**** Regexp Example::          Illustrates regular expression syntax.
**** Regexp Functions::Functions for operating on regular expressions.
     #+begin_src emacs-lisp :tangle yes
       (regexp-quote "sdf\"sdf\"")
     #+end_src
*** Regexp Search::         Searching for a match for a regexp.
*** POSIX Regexps::         Searching POSIX-style for the longest match.
*** Match Data::            Finding out which part of the text matched,
    after a string or regexp search.
*** Search and Replace::    Commands that loop, searching and replacing.
*** Standard Regexps::      Useful regexps for finding sentences, pages,...
** [[file:note/Syntax Tables.org][Syntax Tables]]
   The syntax table controls word and list parsing.
** [[file:note/Abbrevs.org][Abbrevs]]
   How Abbrev mode works, and its data structures.
** [[file:note/Threads.org][Threads]]::Concurrency in Emacs Lisp.
*** Basic Thread Functions::      Basic thread functions.
    #+begin_src emacs-lisp :tangle yes
      (defun test-make-thread-function ()
        (message "test-make-thread-function message!"))

      (make-thread 'test-make-thread-function "test-make-thread-function")

      (make-thread (lambda ()
                     (message "lambda message" ))
                   "make-thread lambda")
    #+end_src
*** Mutexes::                     Mutexes allow exclusive access to data.
*** Condition Variables::         Inter-thread events.
** [[file:note/Processes.org][Processes]]
   Running and communicating with subprocesses.
** [[file:note/Display.org][Display]]
   Features for controlling the screen display.
** [[file:note/System Interface.org][System Interface]]
*** File Notifications::  File notifications.
    #+begin_src emacs-lisp :tangle yes
      (defun test-file-notify-callback(event)
        (message "file created")
        )
      (file-notify-add-watch
       "~/tmp"
       '(change attribute-change)
       'test-file-notify-callback)

      (file-notify-rm-watch descriptor 'file-notify-add-watch)
    #+end_src
** [[file:note/Packaging.org][Packaging]]
   Preparing Lisp code for distribution.
* Appendices
** [[file:note/Antinews.org][Antinews]]
   Info for users downgrading to Emacs 25.
** [[file:note/GNU Free Documentation License.org][GNU Free Documentation License]]
   The license for this documentation.
** [[file:note/GPL.org][GPL]]
   Conditions for copying and changing GNU Emacs.
** [[file:note/Tips.org][Tips]]
   Advice and coding conventions for Emacs Lisp.
** [[file:note/GNU Emacs Internals.org][GNU Emacs Internals]]
   Building and dumping Emacs;
   internal data structures.
** [[file:note/Standard Errors.org][Standard Errors]]
   List of some standard error symbols.
** [[file:note/Standard Keymaps.org][Standard Keymaps]]
   List of some standard keymaps.
** [[file:note/Standard Hooks.org][Standard Hooks]]
   List of some standard hook variables.
** [[file:note/Index.org][Index]]
   Index including concepts, functions, variables,
   and other terms.

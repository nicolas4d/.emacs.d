* 34 Searching and Matching
  *************************

  GNU Emacs provides two ways to search through a buffer for specified
  text: exact string searches and regular expression searches.  After a
  regular expression search, you can examine the “match data” to determine
  which text matched the whole regular expression or various portions of
  it.

* String Search::         Search for an exact match.
* Searching and Case::    Case-independent or case-significant searching.
* Regular Expressions::   Describing classes of strings.
  A “regular expression”, or “regexp” for short, is a pattern that denotes
  a (possibly infinite) set of strings.  Searching for matches for a
  regexp is a very powerful operation.  This section explains how to write
  regexps; the following section says how to search for them.

  For interactive development of regular expressions, you can use the
  ‘M-x re-builder’ command.  It provides a convenient interface for
  creating regular expressions, by giving immediate visual feedback in a
  separate buffer.  As you edit the regexp, all its matches in the target
  buffer are highlighted.  Each parenthesized sub-expression of the regexp
  is shown in a distinct face, which makes it easier to verify even very
  complex regexps.
** Syntax of Regexps::       Rules for writing regular expressions.
Regular expressions have a syntax in which a few characters are special
constructs and the rest are “ordinary”.  An ordinary character is a
simple regular expression that matches that character and nothing else.
The special characters are ‘.’, ‘*’, ‘+’, ‘?’, ‘[’, ‘^’, ‘$’, and ‘\’;
no new special characters will be defined in the future.  The character
‘]’ is special if it ends a character alternative (see later).  The
character ‘-’ is special inside a character alternative.  A ‘[:’ and
balancing ‘:]’ enclose a character class inside a character alternative.
Any other character appearing in a regular expression is ordinary,
unless a ‘\’ precedes it.

   For example, ‘f’ is not a special character, so it is ordinary, and
therefore ‘f’ is a regular expression that matches the string ‘f’ and no
other string.  (It does _not_ match the string ‘fg’, but it does match a
_part_ of that string.)  Likewise, ‘o’ is a regular expression that
matches only ‘o’.

   Any two regular expressions A and B can be concatenated.  The result
is a regular expression that matches a string if A matches some amount
of the beginning of that string and B matches the rest of the string.

   As a simple example, we can concatenate the regular expressions ‘f’
and ‘o’ to get the regular expression ‘fo’, which matches only the
string ‘fo’.  Still trivial.  To do something more powerful, you need to
use one of the special regular expression constructs.

* Regexp Special::      Special characters in regular expressions.
* Char Classes::        Character classes used in regular expressions.
* Regexp Backslash::    Backslash-sequences in regular expressions.


** Regexp Example::          Illustrates regular expression syntax.
** Regexp Functions::        Functions for operating on regular expressions.


* Regexp Search::         Searching for a match for a regexp.
* POSIX Regexps::         Searching POSIX-style for the longest match.
* Match Data::            Finding out which part of the text matched,
  after a string or regexp search.
* Search and Replace::    Commands that loop, searching and replacing.
* Standard Regexps::      Useful regexps for finding sentences, pages,...
* 
  The ‘skip-chars...’ functions also perform a kind of searching.
  *Note Skipping Characters::.  To search for changes in character
  properties, see *note Property Search::.


#+TITLE Org Mode
* introduction
** Summary
** Installation
** Activeation
** Feedback
** Typesetting conventions used in this manual
keybindings
C-c a org-agenda
C-c c org-capture
* Dcoument structure
** ^
Org is based on Outline mode
** Outlines
   <TAB>  org-cycle
** Headlines
stars * one or more
org-footnote-section, which defaults to Footnotes
org-cycle-separator-lines

‘org-special-ctrl-a/e’, ‘org-special-ctrl-k’, ‘org-ctrl-k-protect-subtree’ 
** Visibility cycling
*** Global and local cycling
 ‘<TAB>’     (‘org-cycle’)
 ‘S-<TAB>’     (‘org-global-cycle’)
 C-u <TAB>
 N + S-<TAB>   show level N 
 ‘C-u C-u <TAB>’     (‘org-set-startup-visibility’)
 ‘C-u C-u C-u <TAB>’     (‘outline-show-all’)
 ‘C-c C-r’     (‘org-reveal’) in sparse trees or agenda commads
 ‘C-c C-k’     (‘outline-show-branches’)
 N + ‘C-c <TAB>’     (‘outline-show-children’)
 N + ‘C-c C-x b’     (‘org-tree-to-indirect-buffer’)
 ‘C-c C-x v’     (‘org-copy-visible’)
*** Initial visibility
 org-startup-folded

 per-file basis:
 #+STARTUP: showeverything
 #+STARTUP: content
 #+STARTUP: showall
 #+STARTUP: overview

 VISIBILITY (*note Properties and Columns)
 ‘C-u C-u <TAB>’     (‘org-set-startup-visibility’)

 org-agenda-inhibit-startup
*** Catching invisible edits
 org-catch-invisible-edits
** Motion
‘C-c C-n’     (‘outline-next-visible-heading’)
‘C-c C-p’     (‘outline-previous-visible-heading’)
‘C-c C-f’     (‘org-forward-same-level’)
‘C-c C-b’     (‘org-backward-same-level’)
‘C-c C-u’     (‘outline-up-heading’)
‘C-c C-j’     (‘org-goto’)
** Structure editing
 ‘M-<RET>’     (‘org-insert-heading’)
 C-u C-u M-<RET>
 ‘C-<RET>’     (‘org-insert-heading-respect-content’)
 ‘M-S-<RET>’     (‘org-insert-todo-heading’) org-treat-insert-todo-heading-as-state-change
 ‘C-S-<RET>’     (‘org-insert-todo-heading-respect-content’)
 ‘<TAB>’     (‘org-cycle’)
 ‘M-<left>’     (‘org-do-promote’)
 ‘M-<right>’     (‘org-do-demote’)
 ‘M-S-<left>’     (‘org-promote-subtree’)
 ‘M-S-<right>’     (‘org-demote-subtree’)
 ‘M-h’     (‘org-mark-element’)
‘C-c @’     (‘org-mark-subtree’)
‘C-c C-x C-w’     (‘org-cut-subtree’)
‘C-c C-x M-w’     (‘org-copy-subtree’)
‘C-c C-x C-y’     (‘org-paste-subtree’)
‘C-y’     (‘org-yank’)
‘C-c C-x c’     (‘org-clone-subtree-with-time-shift’) org-clone-subtree-with-time-shift
‘C-c C-w’     (‘org-refile’)
‘C-c ^’     (‘org-sort’)   C-u case-sensitve
‘C-x n s’     (‘org-narrow-to-subtree’)
‘C-x n b’     (‘org-narrow-to-block’)
‘C-x n w’     (‘widen’)
‘C-c *’     (‘org-toggle-heading’)
org-M-RET-may-split-line
** Sparse trees
‘C-c /’     (‘org-sparse-tree’)
‘C-c / r’  or  ‘C-c / /’     (‘org-occur’)     C-c C-c disppear    with C-U 
‘M-g n’  or  ‘M-g M-n’     (‘next-error’)
‘M-g p’  or  ‘M-g M-p’     (‘previous-error’)

org-agenda-custom-commands :
(setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))

ps-print-buffer-with-faces
C-c C-e C-v

org-show-context-detail
org-remove-highlights-with-change
** Plain lists
*** list 
- Unordered: - + *
- Ordered: 1. 1) [@20]
- Description: unordered item :: description term

list must have same left indention.
lists ends:
1. less or equally indented than items at top level.
2. before tow blank lines.

org-list-demote-modify-bullet
org-list-indent-offset
org-list-automatic-rules
*** list keybindings
- ‘<TAB>’     (‘org-cycle’)    
  - fold items
  - new item with no text, change level
  - org-cycle-include-plain-lists
- ‘M-<RET>’     (‘org-insert-heading’)
- ‘M-S-<RET>’ checkbox
- ‘S-up’
- ‘S-down’
- ‘M-up’
- ‘M-down’
- ‘M-S-<LEFT>’
- ‘M-S-<RIGHT>’
  - org-list-automatic-rules
- ‘C-c C-c’ toggle checkbox
- ‘C-c -’ cycle bullets
  - org-plain-list-ordered-item-terminator
  - at active region all become list items.
  - C-u region become single item.
  - a normal line converted to a list item.
- ‘C-c *’ to headline
- ‘C-c C-*’ whole plain list to subtree.
  - checkbox become TODO
- ‘S-<LEFT>/<RIGHT>’ cycles bullet 
  - ‘org-support-shift-select’.
- ‘C-c ^’ sort the plain list.
*** FootnotesInfomation
- '*' must indent
- org-plain-list-ordered-item-terminator
- org-list-allow-alphabetical
- [@20]  before checkbox
- org-M-RET-may-split-line
- org-list-use-circular-motion
- org-list-use-circular-motion
** Drawers
‘C-c C-x d’   ‘org-insert-drawer’
'C-u C-c C-x d'    org-insert-property-drawer
'C-M-i'  completion over drawer
‘C-c C-z’ Add a time-stamped note
‘org-export-with-drawers’
‘org-export-with-properties’ 
** Blocks
‘org-hide-block-startup’ 
or
#+STARTUP: hideblocks
#+STARTUP: nohideblocks
** Footnotes
*** ^
‘[fn:name]’
‘[fn::This is the inline definition of this footnote]’
‘[fn:name:a definition]’
org-footnote-auto-label   ‘#+STARTUP: fninline’ or ‘#+STARTUP: nofninline’
*** commads
- ‘C-c C-x f’ jump to definition
  - create a new footnote
    - org-footnote-define-inline
    - org-footnote-section
  - C-u C-c C-x f
    - s sort
    - r renumber
      - org-footnote-auto-adjust
        - ‘fnadjust’ and ‘nofnadjust’
    - S r+s
    - n Normalize bootnotes by collecting
    - delete
- ‘C-c C-c’ jump and jump back
  - + C-u  just like C-c C-x f
- ‘C-c C-o or mouse-1/2’ links defiition/reference and follow links
- ‘C-c '’ edit in a separate window
** The Orgstruct
minor mode ‘orgstruct-mode’

‘M-x orgstruct-mode <RET>’
or
in message mode :
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)

orgstruct++-mode
orgstruct-heading-prefix-regexp
** Org syntax
https://orgmode.org/worg/dev/org-syntax.html
org-lint  check syntax
* Tables
** Built-in table editor
*** ^
<TAB> re-align and next field
<RET> re-align and next row
C-c C-c re-align
*** create table
| Name | Phone | Age |
|-
type <TAB>

| Name | Phone | Age |
type C-c <RET>
*** keybindings
- ‘C-c |     (org-table-create-or-convert-from-region)’
  - convert region to table
  - C-u ‘C-u’ forces CSV, ‘C-u C-u’ forces TAB, ‘C-u C-u C-u’ will prompt for a regular expression.
  - no active region then just create
- ‘C-c C-c     (org-table-align)’
- ‘C-c <SPC>     (org-table-blank-field)’
- ‘<TAB>     (org-table-next-field)’
- ‘S-<TAB>     (org-table-previous-field)’
- ‘<RET>     (org-table-next-row)’
- ‘M-a     (org-table-beginning-of-field)’
- ‘M-e     (org-table-end-of-field)’
- ‘M-<LEFT>     (org-table-move-column-left)’
- ‘M-<RIGHT>     (org-table-move-column-right)’
- ‘M-S-<LEFT>     (org-table-delete-column)’
- ‘M-S-<RIGHT>     (org-table-insert-column)’
- ‘M-<UP>     (org-table-move-row-up)’
- ‘M-<DOWN>     (org-table-move-row-down)’
- ‘M-S-<UP>     (org-table-kill-row)’
- ‘M-S-<DOWN>     (org-table-insert-row)’
- ‘C-c -     (org-table-insert-hline)’
- ‘C-c <RET>     (org-table-hline-and-move)’
  - + C-c
- ‘C-c C-x M-w     (org-table-copy-region)’
- ‘C-c C-x C-w     (org-table-cut-region)’
- ‘C-c C-x C-y     (org-table-paste-rectangle)’
- ‘M-<RET>     (org-table-wrap-region)’
  - + C-u change the number of desired lines.
- ‘C-c +     (org-table-sum)’
  - inserted with C-y
- ‘S-<RET>     (org-table-copy-down)’
  - integer field values will be incremented. prefix 0 disable increment.
- ‘C-c `     (org-table-edit-field)’
  - in a separate window
  - + C-u full visible
  - + C-u C-u separate window follow the cursor.
- ‘M-x org-table-import <RET>’
  - import a file as a table. separator <TAB>
  - + C-u determine the separator.
- ‘C-c |     (org-table-create-or-convert-from-region)’
- ‘M-x org-table-export <RET>’
  - ‘org-table-export-default-format’.‘TABLE_EXPORT_FILE’ and ‘TABLE_EXPORT_FORMAT’
*** footnoteInfo
(1) To insert a vertical bar into a table field, use ‘\vert’ or,
inside a word ‘abc\vert{}def’.
** Column width and alignment
set width of a column:
<N>
inside field.

C-c ` 

‘org-startup-align-all-tables’ 
per-file basis with:
#+STARTUP: align
#+STARTUP: noalign

alignment:
<r><c><l>
** Column groups
| N | N^2 | N^3 | N^4 | ~sqrt(n)~ | ~sqrt[4](N)~ |
|---+-----+-----+-----+-----------+--------------|
| / |   < |     |   > |         < |            > |
| 1 |   1 |   1 |   1 |         1 |            1 |
|---+-----+-----+-----+-----------+--------------|
** Orgtbl mode
‘M-x orgtbl-mode <RET>’.

(add-hook 'message-mode-hook 'turn-on-orgtbl)
** The spreadsheet
*** References
**** ^
C-c ?  coordinates of a field are.
C-c }  toggle the display of a grid.
**** Field references
- @ROW$COLUMN
  - column
    - $0 current
    - $1 $2 ...
    - $+1 ...
    - $< first $> last
    - $>>> third column from the right
  - row
    - @0 current
    - @1 ...
    - @+1 ...
    - @< @>
    - @I first hline(horizontal separator)
    - @II
    - @-1
    - @III+2
- references
 - with unsigned numbers fixed.
 - with signed numbers relative.
**** Range references
...
return a vector
**** Field coordinates in formulas
@# org-table-current-dline
$# org-table-current-column
**** Named references
$name
org-table-formula-constants

$PROP_Xyz
- constants.el
  - $I #+STARTUP  constSI 
  - cgs #+STARTUP  constcgs
  - constants-unit-system
**** Remote references
- remote(NAME-OR-ID,REF)
  - NAME ‘#+NAME: Name’ line before the table.
  - NAME @ROW$COLUMN    this is indirection of NAME-OR-ID.
*** Formula syntax for Calc
a/b*c  ==  a/(b*c)
mode string after a semicolon.
‘org-calc-default-modes’.
*** Formula syntax for Lisp
'()
*** Durations and time values
*** Field and range formulas
*** Column formulas
*** Lookup functions
*** Editing and debugging formulas
*** Updating the table
*** Advanced features
** Org-Plot
*** Graphical plots using ‘Gnuplot’
*** ASCII bar plots
C-c " a
M-x orgtbl-ascii-plot <RET>
* Hyperlinks
** Link format
[[link][description] ] or [[link] ]   erase ' '
** Internal links
- ‘[ [#my-custom-id]]’ link to ‘CUSTOM_ID’ property ‘my-custom-id’.
- [[My Target]] [[My Target][find my target]]
  - C-c C-o follow link
<<My Target>>
#+NAME: My Target
search for headline

C-c &  previous position of mark ring.
Radio targets C-c C-c on target
** External links
[[string:someString] ]    no ' '
** Handling links
- ‘C-c l     (org-store-link)’
- ‘C-c C-l     (org-insert-link)’
- ‘C-u C-c C-l’  link to file
- ‘C-u C-u C-c C-l’ link to file as absolute path
- ‘C-c C-l  (with cursor on existing link)’   edit
- ‘C-c C-o     (org-open-at-point)’
  - + C-u  with emacs
  - + C-u C-u  avoid with emacs
  - org-link-frame-setup
- ‘<RET>’
  - org-return-follows-link
- ‘C-c C-x C-v     (org-toggle-inline-images)’
  - org-startup-with-inline-images
  - ‘#+STARTUP’ keywords ‘inlineimages’ and ‘noinlineimages’
- ‘C-c %     (org-mark-ring-push)’
- ‘C-c &     (org-mark-ring-goto)’
- ‘C-c C-x C-n     (org-next-link)’
- ‘C-c C-x C-p     (org-previous-link)’

** Using links outside Org
(global-set-key "\C-c L" 'org-insert-link-global)
(global-set-key "\C-c o" 'org-open-at-point-global)
** Link abbreviations
[[linkword:tag][description] ]  with no blank
(setq org-link-abbrev-alist
 '()
)
%s %h %(my-function)
[[google:OrgMode]]

#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
#+LINK: google http://www.google.com/search?q=%s

(org-link-set-parameters ``type'' :complete #'some-function)
** Search options
:: 

[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id] ]
[[file:~/xx.org::/regexp/]]
[[file:::]]
** Custom searches
‘org-create-file-search-functions’
‘org-execute-file-search-functions’
* TODO items
** TODO basics
- ‘C-c C-t     (org-todo)’
  - ‘org-use-fast-todo-selection’
  - ‘C-u C-c C-t’ prompt
- ‘S-<RIGHT>  /  S-<LEFT>’ cycling
  - ‘shift-selection-mode’
  - ‘org-treat-S-cursor-todo-selection-as-state-change’
- ‘C-c / t     (org-show-todo-tree)’  view TODO items
  - C-c / T or C-u  specific TODO
  - C-c N   show the tree Nth keyword in org-todo-keywords
- ‘C-c a t     (org-todo-list)’
- ‘S-M-<RET>     (org-insert-todo-heading)’
org-todo-state-tags-triggers
** TODO extensions
*** ^
org-todo-keywords
*** Workflow states
(setq org-todo-keywords
   '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
*** TODO types
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
*** Multiple sets in one file
     (setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

‘C-u C-u C-c C-t’
‘C-S-<RIGHT>’
‘C-S-<LEFT>’
     These keys jump from one TODO subset to the next.
‘S-<RIGHT>’
‘S-<LEFT>’
     walk through _all_ keywords from all.
shift-selection-mode
*** Fast access to TODO states
     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))
org-fast-tag-selection-include-todo
*** Per-file keywords
#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
or
#+TYP_TODO: Fred Sara Lucy Mike | DONE

#+TODO == #SEQ_TODO

M-<TAB> completion

C-c C-c  make the changes known to org mode.
*** Faces for TODO keywords
org-todo 
org-done

(setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))

org-faces-easy-properties
*** dependencies
    :PROPERTIES:
    :END:
org-enforce-todo-dependencies  block done while children undone
property ORDERED blocked until earlier siblings done.

:PROPERTIES:
:ORDERED: t
:END:

:PROPERTIES:
:NOBLOCKING: t
:END:

‘C-c C-x o     (org-toggle-ordered-property)’
‘C-u C-u C-u C-c C-t’ circumventing any state blocking

org-depend.el  more complex dependency structures.
** Progress logging
*** DONE Closing items
(setq org-log-done 'time)
(setq org-log-done 'note)

‘#+STARTUP: logdone’
‘#+STARTUP: lognotedone’.
*** Tracking TODO state changes
newest first.  org-log-states-order-reversed
org-log-into-drawer
LOGBOOK
LOG_INTO_DRAWER

‘!’ (for a timestamp) 
‘@’ (for a note with timestamp)

(setq org-todo-keywords
    '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
/!
the note taken when entering the state, 
a timestamp should be recorded when leaving the WAIT state.

- TODO Log each state with only a time
  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
- TODO Only log when switching to WAIT, and when repeating
  :LOGGING: WAIT(@) logrepeat
- TODO No logging at all
  :LOGGING: nil
*** Tracking your habits
**** TODO Shave
     SCHEDULED: <2009-10-17 Sat .+2d/4d>
     :PROPERTIES:
     :STYLE:    habit
     :LAST_REPEAT: [2009-10-19 Mon 00:36]
     :END:
‘org-habit-graph-column’
‘org-habit-preceding-days’
‘org-habit-following-days’
‘org-habit-show-habits-only-for-today’
** TODO Priorities
TODO [#A] headline
A B(without a cookie is treated like B) C
org-priority-faces

- ‘C-c ,’   (‘org-priority’)
- ‘S-<UP>     (org-priority-up)’
- ‘S-<DOWN>     (org-priority-down)’
  - org-priority-start-cycle-with-default

‘org-highest-priority’
‘org-lowest-priority’
‘org-default-priority’
** Breaking down tasks
[/] [%] overview
C-c C-c update each time

- COOKIE_DATA
  - ‘checkbox’
  - ‘todo’ 

‘org-hierarchical-todo-statistics’.  
:COOKIE_DATA: todo recursive

automatically to done when children are done :
(defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
** Checkboxes
- ‘C-c C-c     (org-toggle-checkbox)’
  - C-u C-u +  [-] 
- ‘C-c C-x C-b     (org-toggle-checkbox)’
  - C-u +  checkbox presence
  - C-u C-u  [-] 
  - active region:
  - cursor in a headline:
  - no active:
- ‘M-S-<RET>     (org-insert-todo-heading)’
- ‘C-c C-x o     (org-toggle-ordered-property)’
  - org-track-ordered-property-with-tag
- ‘C-c #     (org-update-statistics-cookies)’
  - C-u +  update the entire file
* Tags
** ^
** Tag inheritance
#+FILETAGS: :Peter:Boss:Secret:
org-tags-exclude-from-inheritance
org-use-tag-inheritance
org-tags-match-list-sublevels
org-agenda-use-tag-inheritance
** Setting tags
:tag
M-<TAB> completion
- ‘C-c C-q     (org-set-tags-command)’
  - org-tags-column
  - C-u +  realign
- ‘C-c C-c     (org-set-tags-command)’

- list of tags:
  - dynamically: used in current buffer.
  - globally: org-tag-alist
  - given file:
    #+TAGS: @work @home @tennisclub
    #+TAGS: laptop car pc sailboat
  - #+TAGS: ::use dynamic taglist

org-tag-persistent-alist
#+STARTUP: noptag

- fast tag selection:
  - (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
  - #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)
  - #+TAGS: @work(w)  @home(h)  @tennisclub(t) \n laptop(l)  pc(p)
    - #+TAGS: @work(w)  @home(h)  @tennisclub(t)
      #+TAGS: laptop(l)  pc(p)
  - #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)
C-c C-c activate any changes

mutually exclusive groups in the variable ‘org-tag-alist’,
‘:startgroup’ ‘:endgroup’
‘:newline’

org-fast-tag-selection-single-key
** Tag hierarchy
#+TAGS: [ GTD : Control Persp ]
#+TAGS: [ Control : Context Task ]
#+TAGS: [ Persp : Vision Goal AOF Project ]
(setq org-tag-alist '((:startgrouptag)
                           ("GTD")
                           (:grouptags)
                           ("Control")
                           ("Persp")
                           (:endgrouptag)
                           (:startgrouptag)
                           ("Control")
                           (:grouptags)
                           ("Context")
                           ("Task")
                           (:endgrouptag)))
#+TAGS: { Context : @Home @Work @Call }
mutually exclusive:
‘org-tag-alist’:
‘:startgroup’ ‘:endgroup’
‘:startgrouptag’ & ‘:endgrouptag’

#+TAGS: [ Vision : {V@.+} ]

org-toggle-tags-groups
org-group-tags
** Tag searches
- ‘C-c / m  or  C-c \     (org-match-sparse-tree)’
  - + C-u ignore not TODO line
- ‘C-c a m     (org-tags-view)’
- ‘C-c a M     (org-tags-view)’
* Properties and columns
** Property syntax
   :PROPERTIES:
   :Title:    Goldberg Variations
   :Composer: J.S. Bach
   :Artist:   Glen Gould
   :Publisher: Deutsche Grammophon
   :NDisks:   1
   :END:
Properties are key-value pairs.
org-use-property-inheritance

:xyz: one of :xyzALL:

C-c C-c to activete this change.

#+PROPERTY: var  foo=1
#+PROPERTY: var+ bar=2

org-global-properties

‘M-<TAB>     (pcomplete)’
‘C-c C-x p     (org-set-property)’
‘C-u M-x org-insert-drawer <RET>’
‘C-c C-c     (org-property-action)’
‘C-c C-c s     (org-set-property)’
‘S-<RIGHT>     (org-property-next-allowed-value)’
‘S-<LEFT>     (org-property-previous-allowed-value)’
‘C-c C-c d     (org-delete-property)’
‘C-c C-c D     (org-delete-property-globally)’
‘C-c C-c c     (org-compute-property-at-point)’
** Special properties
** Property searches
‘C-c / m  or  C-c \     (org-match-sparse-tree)’
‘C-c a m     (org-tags-view)’
‘C-c a M     (org-tags-view)’
‘C-c / p’
** Property inheritance
org-use-property-inheritance
hard code:
‘COLUMNS’
‘CATEGORY’
‘ARCHIVE’
‘LOGGING’
** Column view
*** Defining columns
**** Scope of column definitions
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TOOD 
:COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
**** Column attributes
%[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]
*** Using column view
    :PROPERTIES:
    :END:

    - ‘C-c C-x C-c     (org-columns)’
      - org-columns-default-format
      - ‘r     (org-columns-redo)’
      - ‘g     (org-columns-redo)’
      - ‘q     (org-columns-quit)’
      - ‘<LEFT> <RIGHT> <UP> <DOWN>’ move
      - ‘S-<LEFT>/<RIGHT>’ swithc value
      - ‘1..9,0’  select value
      - ‘n     (org-columns-next-allowed-value)’
      - ‘p     (org-columns-previous-allowed-value)’
      - ‘e     (org-columns-edit-value)’
      - ‘C-c C-c     (org-columns-set-tags-or-toggle)’
      - ‘v     (org-columns-show-value)’
      - ‘a     (org-columns-edit-allowed)’
      - ‘<     (org-columns-narrow)’
      - ‘>     (org-columns-widen)’
      - ‘S-M-<RIGHT>     (org-columns-new)’
      - ‘S-M-<LEFT>     (org-columns-delete)’
*** Capturing column view
- ‘:id’
  - local
  - global
  - "ID"
    - M-x org-id-copy <RET>
- ‘:hlines’
- ‘:vlines’
- ‘:maxlevel’
- ‘:maxlevel’
- ‘:indent’

- ‘C-c C-x i     (org-insert-columns-dblock)’
‘C-c C-c  or  C-c C-x C-u     (org-dblock-update)’
‘C-u C-c C-x C-u     (org-update-all-dblocks)’

#+TBLFM:
org-collector
** Property API

* Dates and times
** Timestamps
PLAIN TIMESTAMP; EVENT; APPOINTMENT
          * Meet Peter at the movies
            <2006-11-01 Wed 19:15>
TIMESTAMP WITH REPEATER INTERVAL
          * Pick up Sam at school
            <2007-05-16 Wed 12:30 +1w>
DIARY-STYLE SEXP ENTRIES
          * 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
            <%%(diary-float t 4 2)>
TIME/DATE RANGE
          ** Meeting in Amsterdam
             <2004-08-23 Mon>--<2004-08-26 Thu>
INACTIVE TIMESTAMP
          * Gillian comes late for the fifth time
            [2006-11-01 Wed]
** Creating timestamps
*** ^
- ‘C-c .     (org-time-stamp)’
  - twice in succession, a time range is inserted.
- ‘C-c !     (org-time-stamp-inactive)’
- ‘C-u C-c .’ date and time 
- ‘C-u C-c !’ date and time 
- ‘C-c C-c’ Normalize timestamp
- ‘C-c <     (org-date-from-calendar)’
- ‘C-c >     (org-goto-calendar)’
- ‘C-c C-o     (org-open-at-point)’
- ‘S-<LEFT>     (org-timestamp-down-day)’
- ‘S-<RIGHT>     (org-timestamp-up-day)’
- ‘S-<UP>     (org-timestamp-up)’
- ‘S-<DOWN>     (org-timestamp-down-down)’
- ‘C-c C-y     (org-evaluate-time-range)’
  - with a prefix argument, insert result
*** The date/time prompt
     3-2-5         ⇒ 2003-02-05
     +0            ⇒ today

‘parse-time-months’ and ‘parse-time-weekdays’.
org-read-date-force-compatible-dates

    11am-1:15pm    ⇒ 11:00-13:15

You can control the calendar fully from the minibuffer:
     <RET>              Choose date at cursor in calendar.
     mouse-1            Select date by clicking on it.
     S-<RIGHT>/<LEFT>   One day forward/backward.
     S-<DOWN>/<UP>      One week forward/backward.
     M-S-<RIGHT>/<LEFT> One month forward/backward.
     > / <              Scroll calendar forward/backward by one month.
     M-v / C-v          Scroll calendar forward/backward by 3 months.
     M-S-<DOWN>/<UP>    Scroll calendar forward/backward by one year.
*** Custom time format(not recomend)
‘org-display-custom-times’
‘org-time-stamp-custom-formats’
‘C-c C-x C-t     (org-toggle-time-stamp-overlays)’
** Deadlines and scheduling
   :LOGBOOK:
   CLOCK: [2019-06-19 三 18:05]--[2019-06-19 三 18:30] =>  0:25
   CLOCK: [2019-06-19 三 18:05]--[2019-06-19 三 18:05] =>  0:00
   :END:
*** ^
DEADLINE
org-deadline-warning-days
org-agenda-skip-deadline-prewarning-if-scheduled
SCHEDULED
‘org-scheduled-delay-days’
‘org-agenda-skip-scheduled-delay-if-deadline’
*** Inserting deadline/schedule
    SCHEDULED: <2019-06-19 三> DEADLINE: <2019-06-19 三 20:00>
- ‘C-c C-d     (org-deadline)’
  - C-u +  remove
  - org-log-redeadline
  - ‘#+STARTUP’ keywords ‘logredeadline’,‘lognoteredeadline’, and ‘nologredeadline’
- ‘C-c C-s     (org-schedule)’
  - C-u + remove
  - org-log-reschedule
  - ‘#+STARTUP’ keywords ‘logreschedule’,‘lognotereschedule’, and ‘nologreschedule’
- ‘C-c / d     (org-check-deadlines)’
  - org-deadline-warning-days
  - C-u + show all in file
  - C-N + show N days
- ‘C-c / b     (org-check-before-date)’
- ‘C-c / a     (org-check-after-date)’
‘org-schedule’
‘org-deadline’
*** Repeated tasks
‘DEADLINE:<2005-10-01 Sat +1m -3d>’
++
.+
the variable ‘org-agenda-skip-scheduled-if-deadline-is-shown’ 
‘repeated-after-deadline’
C-c C-x c  copy subtree
** Clocking work time
*** DONE Clocking commands
    CLOSED: [2019-06-19 三 18:16]
    :PROPERTIES:
    :Effort:   0:33
    :END:
    :LOGBOOK:
    CLOCK: [2019-06-19 三 18:11]--[2019-06-19 三 18:16] =>  0:05
    CLOCK: [2019-06-19 三 18:11]--[2019-06-19 三 18:11] =>  0:00
    CLOCK: [2019-06-19 三 18:10]--[2019-06-19 三 18:10] =>  0:00
    CLOCK: [2019-06-19 三 18:10]--[2019-06-19 三 18:10] =>  0:00
    CLOCK: [2019-06-19 三 18:10]--[2019-06-19 三 18:10] =>  0:00
    CLOCK: [2019-06-19 三 18:05]--[2019-06-19 三 18:05] =>  0:00
    CLOCK: [2019-06-19 三 18:04]--[2019-06-19 三 18:05] =>  0:01
    CLOCK: [2019-12-19 四 18:20]--[2019-12-19 四 19:10] =>  0:50
    :END:
- ‘C-c C-x C-i     (org-clock-in)’
  - org-clock-into-drawer
    - ‘CLOCK_INTO_DRAWER’ ‘LOG_INTO_DRAWER’ 
  - C-u + recently clocked tasks
  - C-u C-u + mark as default task      letter 'd'
  - C-u C-u C-u  continuous clocking
  - CLOCK_MODELINE_TOTAL
- ‘C-c C-x C-o     (org-clock-out)’
  - org-log-note-clock-out
    - ‘#+STARTUP: lognoteclock-out’
- ‘C-c C-x C-x     (org-clock-in-last)’
  - C-u + select
  - C-u C-u continuous clocking
- ‘C-c C-x C-e     (org-clock-modify-effort-estimate)’
- ‘C-c C-c  or  C-c C-y     (org-evaluate-time-range)’
- ‘C-S-<up/down>     (org-clock-timestamps-up/down)’
- ‘S-M-<up/down>     (org-timestamp-up/down)’
- ‘C-c C-t     (org-todo)’
- ‘C-c C-x C-q     (org-clock-cancel)’
- ‘C-c C-x C-j     (org-clock-goto)’
  - ‘C-u’ + select task
- ‘C-c C-x C-d     (org-clock-display)’
  - ‘org-remove-highlights-with-change’) 
  - ‘C-c C-c’.
*** The clock table
- ‘C-c C-x C-r     (org-clock-report)’
  - in existing clock table just update it
  - C-u first clock
- ‘C-c C-c  or  C-c C-x C-u     (org-dblock-update)’
- ‘C-u C-c C-x C-u’
‘S-<LEFT>’
‘S-<RIGHT>     (org-clocktable-try-shift)’

org-clocktable-defaults
org-clocktable-write-default
*** Resolving idle time
**** Resolving idle time
 org-clock-idle-time
‘M-x org-resolve-clocks <RET>’ (or‘C-c C-x C-z’).
k K s S C
**** Continuous clocking
org-clock-continuously
three uiversal arguments with ‘org-clock-in’ and 
two ‘C-u C-u’ with ‘org-clock-in-last’.
** Effort estimates
Effort estimates are stored in a special property ‘EFFORT’.
‘C-c C-x e     (org-set-effort)’
‘C-c C-x C-e     (org-clock-modify-effort-estimate)’
** Timers
Relative timer and countdown timer.
- ‘C-c C-x 0     (org-timer-start)’
- ‘C-c C-x ;     (org-timer-set-timer)’
- ‘C-c C-x .     (org-timer)’
  - C-u + relative timer restarted
- ‘C-c C-x -     (org-timer-item)’
  - C-u first reset the relative timer to 0.
- ‘M-<RET>     (org-insert-heading)’
- ‘C-c C-x ,     (org-timer-pause-or-continue)’
- ‘C-c C-x _     (org-timer-stop)’
* Capture - Refile - Archive
** Capture
*** ^
org-capture.el org-capture-templates
*** Setting up capture
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
*** Using capture
- ‘C-c c     (org-capture)’ need to installl it.
  - ‘C-u C-c c’ visit the capture
  - ‘C-u C-u C-c c’ visit last capture
  - C-0 + insert at current buffer.
- ‘C-c C-c     (org-capture-finalize)’
  - C-u jump
- ‘C-c C-w     (org-capture-refile)’
  - C-u passed on to the 'org-refile' command.
- ‘C-c C-k     (org-capture-kill)’
org-capture-last-stored
*** Capture templates
‘C-c c C’  ‘org-capture-templates’.
**** Template elements
**** Template expansion
**** Templates in contexts
** Attachments :ATTACH:
   :PROPERTIES:
   :Attachments: orgmodtest.org
   :ID:       e0cf06d4-ff60-45f1-b8e3-80dd9950cd80
   :END:
‘C-c C-a     (org-attach)’
** RSS feeds
** Protocols
** Refile and copy
** Archiving
* Agenda views
* Markup
** Embedded LaTeX
LaTeX is widely used to typeset scientific documents.
*** LaTeX fragments
When exporting to HTML, Org can use either MathJax or transcode the math
into images.

sudo apt install transcode:
- Environments of any kind. \bengin appears in newline.
- Text within the usual LaTeX math delimiters.
  - $no space$
  - use \(...\) when in doubt

example:

\begin{equation}
x=\sqrt{b}
\end{equation}

$a^2=b$ 
\( b=2 \)

$$ a=+\sqrt{2} $$
\[ a=-\sqrt{2} \].

org-export-with-latex

#+OPTIONS: tex:t
          Do the right thing automatically (MathJax)
# +OPTIONS: tex:nil        Do not process LaTeX fragments at all
# +OPTIONS: tex:verbatim   Verbatim export, for jsMath or so

*** Previewing LaTeX fragments
If you have a working LaTeX installation and ‘dvipng’, ‘dvisvgm’ or
‘convert’ installed.
sudo apt install dvipng


org-format-latex-options
org-format-latex-header

:scale
:html-scale

‘C-c C-x C-l’
‘C-c C-c’

#+STARTUP: nolatexpreview
#+STARTUP: latexpreview
*** CDLaTeX mode
CDLaTeX mode is a minor mode
* Exporting
* Publishing
* Working with source code
[[file:workingWithSourceCode.org]]
* Miscellaneous
* Hacking
* MobileOrg
* History and acknowledgments
* GNU Free Documentation License
* Main Index
* Key Index
* Command and Function Index
* Variable Index
